library(lubridate)
install.packages('lubridate')
library(lubridate)
dat = read.csv("gaData.csv")
summary(dat)
names(dat)
dim(data)
dim(dat)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
plaot(tstrain)
qplot(tstrain)
plot(tstrain)
plot(dat$date, dat$visitsTumblr)
head(training)
dim(training)
library(quantmod)
install.packages('quantmod')
library(quantmod)
to.monthly(training$date)
getSymbols(training$date)
getSymbols("GOOG", src=training$date)
ts(training)
ts1 <- ts(training)
head(ts1)
plot(ts1)
plot(tstrain)
plot(decompose(tstrain))
decompose(tstrain)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG[,1:4])
head(mGoog)
GOOG <- GOOG[,1:4]
mGoog <- to.monthly(GOOG[,1:4])
mGoog <- to.monthly(GOOG)
head(mGoog)
googOpen <- Op(mGoog)
head(googOpen)
? Op
ts1 <- ts(googOpen,frequency=12)
plot(ts1,xlab="Years+1", ylab="GOOG")
ts1 <- ts(googOpen,frequency=2)
plot(ts1,xlab="Years+1", ylab="GOOG")
tail(googOpen)
ts1 <- ts(googOpen,frequency=6)
plot(ts1,xlab="Years+1", ylab="GOOG")
decompose(tstrain)
decompose(tstrain)
tstrain = ts(training$visitsTumblr, frequency=12)
plot(tstrain)
decompose(tstrain)
plot(decompose(tstrain))
fit <- bats(tstrain)
install.packages(forecase)
install.packages('forecast')
library(forecast)
fit <- bats(tstrain)
plot(forecast(fit))
head(training)
tail(training)
head(testing)
tail(testing)
dim(testing)
fs <-forecast(fit, 235)
plot(fs)
length(fs)
dim(fs)
fs
summary(fs)
summary(fs)
head(fs)
fs$fitted
dim(fs$fitted)
fs$model$y
dim(fs$model$y)
fs <-forecast(fit)
dim(fs$fitted)
plot(fs)
tstesting<- ts(testing)
accuracy(fs, tstesting)
plot(tstesting)
?forecast
fs <-forecast(fit, h=235)
dim(fs)
plot(fs)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
plot(testing)
plot(tstrain)
length(tstrain)
dim(tstrain)
tstest <- ts(testing)
length(tstest)
dim(testing)
dim(testing)
tstest(testing$visitsTumblr)
tstest<- ts(testing$visitsTumblr)
dim(tstest)
length(tstest)
dim(training)
fit <- bats(tstrain)
plot(fs)
plot(fs)
fs <-forecast(fit, h=235)
plot(fs)
plot(fs)
fs$model$y
length(fs$model$y)
length(fs$model$x)
fs$model$fitted.values
length(fs$model$fitted.values)
fs$upper
fs$lower
length(fs$upper)
dim(fs$upper)
head(fs$upper)
head(fs$lower)
plot(fs)
accuracy(fs, tstest)
tstest
tstest<- ts(testing$visitsTumblr)
accuracy(fs, tstest)
plot(fs)
lines(tstest, col="red")
plot(fs)
lines(testing$visitsTumblr, col="red")
ts1Train <- window(fs,start=366,end=600)
head(testing)
plot(fs)
lines(testing$visitsTumblr, col="red")
fs$upper
plot(fs$upper)
lines(testing$visitsTumblr, col="red")
fs
head(fs)
tstest <-ts(testing$visitsTumblr)
withinvalues <- (tstest <= fs$upper) & (tstest >= fs$lower))
withinvalues <- ((tstest <= fs$upper) & (tstest >= fs$lower))
length(tstest)
length(fs$upper)
fs$upper[1]
fs$upper
fs$upper[,1]
withinvalues <- ((tstest <= fs$upper[,1]) & (tstest >= fs$lower[,1]))
withinvalues/235
count(withinvalues)
length(withinvalues)
fs$lower
withinvalues <- ((tstest >= fs$upper[,1]) & (tstest <= fs$l[,2]))
withinvalues <- ((tstest >= fs$upper[,1]) & (tstest <= fs$upper[,2]))
lenght(withinvalues)
length(withinvalues)
withinvalues
withinvalues <- ((tstest <= fs$upper[,1]) & (tstest >= fs$lower[,1]))
count(withinvalues == TRUE)
t <- (withinvalues == TRUE)
length(t)
t
(withinvalues == TRUE)
is.element(TRUE, withinvalues)
table(withinvalues)
201/235
withinvalues <- ((tstest >= fs$upper[,1]) & (tstest <= fs$upper[,2]))
table(withinvalues)
withinvalues <- ((tstest <= fs$upper[,1]) && (tstest >= fs$lower[,1]))
table(withinvalues)
withinvalues <- ((tstest <= fs$upper[,1]) & (tstest >= fs$lower[,1]))
table(withinvalues)
201/235
withinvalues <- ((tstest <= fs$upper[,2]) & (tstest >= fs$lower[,1]))
table(withinvalues)
226/235
withinvalues <- ((tstest <= fs$upper[,2]) & (tstest >= fs$lower[,2]))
table(withinvalues)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
set.seed(325)
install.packages('e1071')
library(e1071)
head(training)
head(concrete)
dim(training)
dim(concrete)
fit_svm <- svm(CompressiveStrength ~ ., data=training)
fit_svm
p <- predict(fit_svm,testing)
summary(p)
sqrt(sum(p - testing$CompressiveStrength)^2)
set.seed(325)
fit_svm <- svm(CompressiveStrength ~ ., data=training)
p <- predict(fit_svm,testing)
sqrt(sum((p - testing$CompressiveStrength))^2)
sqrt(mean((p - testing$CompressiveStrength))^2)
length(testing)
dim(testing)
sqrt((sum((p - testing$CompressiveStrength))^2)/256)
(sum((p - testing$CompressiveStrength))^2)/256
p
dim(p)
p <- predict(fit_svm,testing)
plot(p)
length(p)
dim(p)
p - testing$CompressiveStrength
length(p)
sqrt(mean(p - testing$CompressiveStrength)^2)
sqrt(sum(p - testing$CompressiveStrength)^2)
sqrt((sum(p - testing$CompressiveStrength)^2)/256)
q()
